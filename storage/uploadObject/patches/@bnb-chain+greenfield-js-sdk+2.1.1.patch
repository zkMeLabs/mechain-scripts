diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/cjs/index.js b/node_modules/@bnb-chain/greenfield-js-sdk/dist/cjs/index.js
index 468bd2c..5e0197c 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/cjs/index.js
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/cjs/index.js
@@ -46,8 +46,8 @@ var tx$7 = require('@bnb-chain/greenfield-cosmos-types/greenfield/bridge/tx');
 var tx$9 = require('@bnb-chain/greenfield-cosmos-types/cosmos/feegrant/v1beta1/tx');
 var signingKey = require('@ethersproject/signing-key');
 var ed25519 = require('@noble/curves/ed25519');
-var keccak_js = require('ethereum-cryptography/keccak.js');
-var utils_js = require('ethereum-cryptography/utils.js');
+var keccak_js = require('ethereum-cryptography/keccak');
+var utils_js = require('ethereum-cryptography/utils');
 var tx$3 = require('@bnb-chain/greenfield-cosmos-types/greenfield/payment/tx');
 var gov = require('@bnb-chain/greenfield-cosmos-types/cosmos/gov/v1/gov');
 var tx$a = require('@bnb-chain/greenfield-cosmos-types/cosmos/gov/v1/tx');
@@ -2391,6 +2391,7 @@ const generateUrlByBucketName = (endpoint = '', bucketName) => {
     verifyBucketName(bucketName);
     verifyUrl(endpoint);
     const { protocol } = new URL(endpoint);
+    return endpoint; // modify by luke
     return endpoint.replace(`${protocol}//`, `${protocol}//${bucketName}.`);
 };
 const isSQLInjection = (input) => {
@@ -2719,14 +2720,18 @@ const fetchWithTimeout = (fetchUrl = '', fetchOptions = {}, duration = 30000) =>
 // https://github.com/bnb-chain/greenfield-storage-provider/blob/master/docs/storage-provider-rest-api/get_object.md
 const getGetObjectMetaInfo = (endpoint, params) => __awaiter(void 0, void 0, void 0, function* () {
     const { bucketName, objectName } = params;
-    const path = `/${encodePath(objectName)}`;
+    // const path = `/${encodePath(objectName)}`;
+    const path = `/${encodePath(bucketName)}/${encodePath(objectName)}`;
     const query = '';
-    const url = new URL(path, generateUrlByBucketName(endpoint, bucketName));
+    // const url = new URL(path, generateUrlByBucketName(endpoint, bucketName));
+    const base = generateUrlByBucketName(endpoint, bucketName);
+    let url = new URL(path, base);
+    console.log(url.hostname, url.href)
     const reqMeta = {
         contentSHA256: EMPTY_STRING_SHA256,
         method: METHOD_GET,
         url: {
-            hostname: new URL(url).hostname,
+            hostname: url.hostname,
             query,
             path,
         },
@@ -2745,7 +2750,7 @@ const getGetObjectMetaInfo = (endpoint, params) => __awaiter(void 0, void 0, voi
 // https://github.com/bnb-chain/greenfield-storage-provider/blob/master/docs/storage-provider-rest-api/put_object.md
 const getPutObjectMetaInfo = (endpoint, params) => __awaiter(void 0, void 0, void 0, function* () {
     const { bucketName, objectName, txnHash, contentType, body, delegatedOpts } = params;
-    const path = `/${encodePath(objectName)}`;
+    const path = `/${encodePath(bucketName)}/${encodePath(objectName)}`;
     let queryMap = {};
     if (delegatedOpts) {
         queryMap = {
@@ -2762,7 +2767,7 @@ const getPutObjectMetaInfo = (endpoint, params) => __awaiter(void 0, void 0, voi
         txnHash: txnHash,
         method: METHOD_PUT,
         url: {
-            hostname: url.hostname,
+            hostname: url.host,
             query: url.searchParams.toString(),
             path,
         },
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/account.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/account.d.ts
index bfae20a..4f380d9 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/account.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/account.d.ts
@@ -1,11 +1,11 @@
-import { TxClient } from '../clients/txClient';
+import { TxClient } from '@bnb-chain/greenfield-js-sdk/dist/esm/clients/txClient';
 import { BaseAccount } from '@bnb-chain/greenfield-cosmos-types/cosmos/auth/v1beta1/auth';
 import { QueryModuleAccountByNameResponse, QueryModuleAccountsResponse } from '@bnb-chain/greenfield-cosmos-types/cosmos/auth/v1beta1/query';
 import { QueryBalanceRequest, QueryBalanceResponse } from '@bnb-chain/greenfield-cosmos-types/cosmos/bank/v1beta1/query';
 import { MsgMultiSend, MsgSend } from '@bnb-chain/greenfield-cosmos-types/cosmos/bank/v1beta1/tx';
 import { QueryPaymentAccountsByOwnerResponse } from '@bnb-chain/greenfield-cosmos-types/greenfield/payment/query';
 import { MsgCreatePaymentAccount } from '@bnb-chain/greenfield-cosmos-types/greenfield/payment/tx';
-import { TxResponse } from '..';
+import { TxResponse } from '@bnb-chain/greenfield-js-sdk/dist/esm';
 export interface IAccount {
     /**
      * retrieves account information for a given address.
@@ -45,8 +45,8 @@ export declare class Account implements IAccount {
     constructor(txClient: TxClient);
     private queryClient;
     multiTransfer(address: string, msg: MsgMultiSend): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
@@ -57,8 +57,8 @@ export declare class Account implements IAccount {
         };
     }>;
     createPaymentAccount(msg: MsgCreatePaymentAccount): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
@@ -74,8 +74,8 @@ export declare class Account implements IAccount {
     getAccountBalance(request: QueryBalanceRequest): Promise<QueryBalanceResponse>;
     getAccount(address: string): Promise<BaseAccount>;
     transfer(msg: MsgSend): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/bucket.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/bucket.d.ts
index 214283b..9108b76 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/bucket.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/bucket.d.ts
@@ -1,12 +1,12 @@
 import { ActionType, PrincipalType } from '@bnb-chain/greenfield-cosmos-types/greenfield/permission/common';
 import { QueryBucketNFTResponse, QueryHeadBucketExtraResponse, QueryHeadBucketResponse, QueryNFTRequest, QueryPolicyForAccountRequest, QueryPolicyForAccountResponse, QueryVerifyPermissionResponse } from '@bnb-chain/greenfield-cosmos-types/greenfield/storage/query';
 import { MsgCancelMigrateBucket, MsgCreateBucket, MsgDeleteBucket, MsgPutPolicy, MsgSetBucketFlowRateLimit, MsgToggleSPAsDelegatedAgent, MsgUpdateBucketInfo } from '@bnb-chain/greenfield-cosmos-types/greenfield/storage/tx';
-import { AuthType, TxResponse } from '..';
-import { TxClient } from '../clients/txClient';
-import type { GetBucketMetaRequest, GetBucketMetaResponse, GetUserBucketsRequest, GetUserBucketsResponse, IQuotaProps, ListBucketReadRecordRequest, ListBucketReadRecordResponse, ListBucketsByIDsRequest, ListBucketsByIDsResponse, ListBucketsByPaymentAccountRequest, ListBucketsByPaymentAccountResponse, MigrateBucketApprovalRequest, MigrateBucketApprovalResponse, ReadQuotaRequest, SpResponse } from '../types/sp';
-import { Sp } from './sp';
-import { Storage } from './storage';
-import { VirtualGroup } from './virtualGroup';
+import { AuthType, TxResponse } from '@bnb-chain/greenfield-js-sdk/dist/esm';
+import { TxClient } from '@bnb-chain/greenfield-js-sdk/dist/esm/clients/txClient';
+import type { GetBucketMetaRequest, GetBucketMetaResponse, GetUserBucketsRequest, GetUserBucketsResponse, IQuotaProps, ListBucketReadRecordRequest, ListBucketReadRecordResponse, ListBucketsByIDsRequest, ListBucketsByIDsResponse, ListBucketsByPaymentAccountRequest, ListBucketsByPaymentAccountResponse, MigrateBucketApprovalRequest, MigrateBucketApprovalResponse, ReadQuotaRequest, SpResponse } from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp';
+import { Sp } from '@bnb-chain/greenfield-js-sdk/dist/esm/api/sp';
+import { Storage } from '@bnb-chain/greenfield-js-sdk/dist/esm/api/storage';
+import { VirtualGroup } from '@bnb-chain/greenfield-js-sdk/dist/esm/api/virtualGroup';
 export interface IBucket {
     /**
      * send createBucket txn to greenfield chain
@@ -66,8 +66,8 @@ export declare class Bucket implements IBucket {
     private queryClient;
     private spClient;
     setPaymentAccountFlowRateLimit(msg: MsgSetBucketFlowRateLimit): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
@@ -78,8 +78,8 @@ export declare class Bucket implements IBucket {
         };
     }>;
     createBucket(msg: MsgCreateBucket): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
@@ -90,8 +90,8 @@ export declare class Bucket implements IBucket {
         };
     }>;
     deleteBucket(msg: MsgDeleteBucket): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
@@ -102,8 +102,8 @@ export declare class Bucket implements IBucket {
         };
     }>;
     toggleSpAsDelegatedAgent(msg: MsgToggleSPAsDelegatedAgent): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
@@ -122,7 +122,7 @@ export declare class Bucket implements IBucket {
         code: number;
         message: string;
         statusCode: number;
-        body: import("../types/sp/Common").BucketMetaWithVGF[];
+        body: import("@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/Common").BucketMetaWithVGF[];
     } | {
         code: number;
         message: any;
@@ -133,8 +133,8 @@ export declare class Bucket implements IBucket {
     updateBucketInfo(srcMsg: Omit<MsgUpdateBucketInfo, 'chargedReadQuota'> & {
         chargedReadQuota: string;
     }): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
@@ -145,8 +145,8 @@ export declare class Bucket implements IBucket {
         };
     }>;
     putBucketPolicy(bucketName: string, srcMsg: Omit<MsgPutPolicy, 'resource'>): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
@@ -157,8 +157,8 @@ export declare class Bucket implements IBucket {
         };
     }>;
     deleteBucketPolicy(operator: string, bucketName: string, principalAddr: string, principalType: keyof typeof PrincipalType): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
@@ -177,8 +177,8 @@ export declare class Bucket implements IBucket {
         signedMsg: MigrateBucketApprovalResponse;
     }>;
     migrateBucket(params: MigrateBucketApprovalRequest, authType: AuthType): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/challenge.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/challenge.d.ts
index c249ed0..53263f3 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/challenge.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/challenge.d.ts
@@ -1,7 +1,7 @@
 import { QueryInturnAttestationSubmitterResponse, QueryLatestAttestedChallengesResponse, QueryParamsResponse } from '@bnb-chain/greenfield-cosmos-types/greenfield/challenge/query';
 import { MsgAttest, MsgSubmit } from '@bnb-chain/greenfield-cosmos-types/greenfield/challenge/tx';
-import { TxResponse } from '..';
-import { TxClient } from '../clients/txClient';
+import { TxResponse } from '@bnb-chain/greenfield-js-sdk/dist/esm';
+import { TxClient } from '@bnb-chain/greenfield-js-sdk/dist/esm/clients/txClient';
 export interface IChallenge {
     /**
      * challenges the service provider data integrity, used by off-chain service greenfield-challenger.
@@ -23,8 +23,8 @@ export declare class Challenge implements IChallenge {
     private queryClient;
     constructor(txClient: TxClient);
     submitChallenge(address: string, msg: MsgSubmit): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
@@ -35,8 +35,8 @@ export declare class Challenge implements IChallenge {
         };
     }>;
     attestChallenge(address: string, msg: MsgAttest): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/crosschain.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/crosschain.d.ts
index 2cbef0d..1985c06 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/crosschain.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/crosschain.d.ts
@@ -4,8 +4,8 @@ import { MsgClaim } from '@bnb-chain/greenfield-cosmos-types/cosmos/oracle/v1/tx
 import { QueryParamsResponse } from '@bnb-chain/greenfield-cosmos-types/greenfield/bridge/query';
 import { MsgTransferOut } from '@bnb-chain/greenfield-cosmos-types/greenfield/bridge/tx';
 import { MsgMirrorBucket, MsgMirrorGroup, MsgMirrorObject } from '@bnb-chain/greenfield-cosmos-types/greenfield/storage/tx';
-import { TxResponse } from '..';
-import { TxClient } from '../clients/txClient';
+import { TxResponse } from '@bnb-chain/greenfield-js-sdk/dist/esm';
+import { TxClient } from '@bnb-chain/greenfield-js-sdk/dist/esm/clients/txClient';
 export interface ICrossChain {
     /**
      * makes a transfer from Greenfield to BSC
@@ -47,8 +47,8 @@ export declare class CrossChain implements ICrossChain {
     constructor(txClient: TxClient);
     private queryClient;
     transferOut(msg: MsgTransferOut): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
@@ -59,8 +59,8 @@ export declare class CrossChain implements ICrossChain {
         };
     }>;
     claims(msg: MsgClaim): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
@@ -75,8 +75,8 @@ export declare class CrossChain implements ICrossChain {
     getInturnRelayer(request: QueryInturnRelayerRequest): Promise<QueryInturnRelayerResponse>;
     getCrosschainPackage(request: QueryCrossChainPackageRequest): Promise<QueryCrossChainPackageResponse>;
     mirrorGroup(msg: MsgMirrorGroup): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
@@ -87,8 +87,8 @@ export declare class CrossChain implements ICrossChain {
         };
     }>;
     mirrorBucket(msg: MsgMirrorBucket): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
@@ -99,8 +99,8 @@ export declare class CrossChain implements ICrossChain {
         };
     }>;
     mirrorObject(msg: MsgMirrorObject): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/distribution.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/distribution.d.ts
index e212333..1e67f2e 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/distribution.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/distribution.d.ts
@@ -1,6 +1,6 @@
 import { MsgFundCommunityPool, MsgSetWithdrawAddress, MsgWithdrawDelegatorReward, MsgWithdrawValidatorCommission } from '@bnb-chain/greenfield-cosmos-types/cosmos/distribution/v1beta1/tx';
-import { TxResponse } from '..';
-import { TxClient } from '../clients/txClient';
+import { TxResponse } from '@bnb-chain/greenfield-js-sdk/dist/esm';
+import { TxClient } from '@bnb-chain/greenfield-js-sdk/dist/esm/clients/txClient';
 export interface IDistribution {
     /**
      * sets the withdrawal address for a delegator address
@@ -23,8 +23,8 @@ export declare class Distribution implements IDistribution {
     private txClient;
     constructor(txClient: TxClient);
     setWithdrawAddress(msg: MsgSetWithdrawAddress): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
@@ -35,8 +35,8 @@ export declare class Distribution implements IDistribution {
         };
     }>;
     withdrawValidatorCommission(address: string, msg: MsgWithdrawValidatorCommission): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
@@ -47,8 +47,8 @@ export declare class Distribution implements IDistribution {
         };
     }>;
     withdrawDelegatorReward(msg: MsgWithdrawDelegatorReward): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
@@ -59,8 +59,8 @@ export declare class Distribution implements IDistribution {
         };
     }>;
     fundCommunityPoolundComm(address: string, msg: MsgFundCommunityPool): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/feegrant.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/feegrant.d.ts
index 990ec51..a9a2a75 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/feegrant.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/feegrant.d.ts
@@ -1,7 +1,7 @@
-import { TxClient } from '../clients/txClient';
+import { TxClient } from '@bnb-chain/greenfield-js-sdk/dist/esm/clients/txClient';
 import { QueryAllowanceRequest, QueryAllowanceResponse, QueryAllowancesRequest, QueryAllowancesResponse } from '@bnb-chain/greenfield-cosmos-types/cosmos/feegrant/v1beta1/query';
 import { MsgRevokeAllowance } from '@bnb-chain/greenfield-cosmos-types/cosmos/feegrant/v1beta1/tx';
-import { IGrantAllowance, TxResponse } from '..';
+import { IGrantAllowance, TxResponse } from '@bnb-chain/greenfield-js-sdk/dist/esm';
 export interface IFeeGrant {
     grantAllowance(msg: IGrantAllowance): Promise<TxResponse>;
     revokeAllowance(msg: MsgRevokeAllowance): Promise<TxResponse>;
@@ -13,8 +13,8 @@ export declare class FeeGrant implements IFeeGrant {
     constructor(txClient: TxClient);
     private queryClient;
     grantAllowance(params: IGrantAllowance): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
@@ -25,8 +25,8 @@ export declare class FeeGrant implements IFeeGrant {
         };
     }>;
     revokeAllowance(msg: MsgRevokeAllowance): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/group.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/group.d.ts
index ff5a6a7..5800c79 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/group.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/group.d.ts
@@ -1,8 +1,8 @@
 import { QueryGroupNFTResponse, QueryHeadGroupMemberResponse, QueryHeadGroupResponse, QueryListGroupsRequest, QueryListGroupsResponse, QueryNFTRequest, QueryPolicyForGroupRequest, QueryPolicyForGroupResponse } from '@bnb-chain/greenfield-cosmos-types/greenfield/storage/query';
 import { MsgCreateGroup, MsgDeleteGroup, MsgLeaveGroup, MsgPutPolicy, MsgUpdateGroupExtra, MsgUpdateGroupMember } from '@bnb-chain/greenfield-cosmos-types/greenfield/storage/tx';
-import { TxResponse } from '..';
-import { TxClient } from '../clients/txClient';
-import { Storage } from './storage';
+import { TxResponse } from '@bnb-chain/greenfield-js-sdk/dist/esm';
+import { TxClient } from '@bnb-chain/greenfield-js-sdk/dist/esm/clients/txClient';
+import { Storage } from '@bnb-chain/greenfield-js-sdk/dist/esm/api/storage';
 export interface IGroup {
     /**
      * create a new group on greenfield chain the group members can be initialized  or not
@@ -49,8 +49,8 @@ export declare class Group implements IGroup {
     constructor(txClient: TxClient, storage: Storage);
     private queryClient;
     createGroup(msg: MsgCreateGroup): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
@@ -61,8 +61,8 @@ export declare class Group implements IGroup {
         };
     }>;
     deleteGroup(msg: MsgDeleteGroup): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
@@ -73,8 +73,8 @@ export declare class Group implements IGroup {
         };
     }>;
     updateGroupMember(msg: MsgUpdateGroupMember): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
@@ -85,8 +85,8 @@ export declare class Group implements IGroup {
         };
     }>;
     updateGroupExtra(msg: MsgUpdateGroupExtra): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
@@ -97,8 +97,8 @@ export declare class Group implements IGroup {
         };
     }>;
     leaveGroup(address: string, msg: MsgLeaveGroup): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
@@ -116,8 +116,8 @@ export declare class Group implements IGroup {
     getBucketPolicyOfGroup(bucketName: string, groupId: number): Promise<QueryPolicyForGroupResponse>;
     getObjectPolicyOfGroup(bucketName: string, objectName: string, groupId: number): Promise<QueryPolicyForGroupResponse>;
     putGroupPolicy(owner: string, groupName: string, srcMsg: Omit<MsgPutPolicy, 'resource' | 'expirationTime'>): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/objects.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/objects.d.ts
index d79c602..cb92b7c 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/objects.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/objects.d.ts
@@ -1,16 +1,16 @@
 import { ActionType, PrincipalType } from '@bnb-chain/greenfield-cosmos-types/greenfield/permission/common';
 import { QueryHeadObjectResponse, QueryNFTRequest, QueryObjectNFTResponse, QueryPolicyForAccountResponse, QueryVerifyPermissionResponse } from '@bnb-chain/greenfield-cosmos-types/greenfield/storage/query';
 import { MsgCancelCreateObject, MsgCreateObject, MsgDeleteObject, MsgPutPolicy, MsgUpdateObjectInfo } from '@bnb-chain/greenfield-cosmos-types/greenfield/storage/tx';
-import { TxClient } from '../clients/txClient';
-import { AuthType, GetListObjectPoliciesRequest, GetListObjectPoliciesResponse, GetPrivewObject, ListObjectsByBucketNameRequest, ListObjectsByIDsRequest, ListObjectsByIDsResponse, SpResponse, TxResponse } from '../types';
-import { DelegateCreateFolderRepsonse, DelegatedCreateFolderRequest } from '../types/sp/DelegateCreateFolder';
-import { DelegatedPubObjectRequest } from '../types/sp/DelegatedPubObject';
-import { GetObjectRequest } from '../types/sp/GetObject';
-import { GetObjectMetaRequest, GetObjectMetaResponse } from '../types/sp/GetObjectMeta';
-import { ListObjectsByBucketNameResponse } from '../types/sp/ListObjectsByBucketName';
-import { PutObjectRequest } from '../types/sp/PutObject';
-import { Sp } from './sp';
-import { Storage } from './storage';
+import { TxClient } from '@bnb-chain/greenfield-js-sdk/dist/esm/clients/txClient';
+import { AuthType, GetListObjectPoliciesRequest, GetListObjectPoliciesResponse, GetPrivewObject, ListObjectsByBucketNameRequest, ListObjectsByIDsRequest, ListObjectsByIDsResponse, SpResponse, TxResponse } from '@bnb-chain/greenfield-js-sdk/dist/esm/types';
+import { DelegateCreateFolderRepsonse, DelegatedCreateFolderRequest } from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/DelegateCreateFolder';
+import { DelegatedPubObjectRequest } from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/DelegatedPubObject';
+import { GetObjectRequest } from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/GetObject';
+import { GetObjectMetaRequest, GetObjectMetaResponse } from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/GetObjectMeta';
+import { ListObjectsByBucketNameResponse } from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListObjectsByBucketName';
+import { PutObjectRequest } from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/PutObject';
+import { Sp } from '@bnb-chain/greenfield-js-sdk/dist/esm/api/sp';
+import { Storage } from '@bnb-chain/greenfield-js-sdk/dist/esm/api/storage';
 export interface IObject {
     createObject(msg: MsgCreateObject): Promise<TxResponse>;
     uploadObject(configParam: PutObjectRequest, authType: AuthType): Promise<SpResponse<null>>;
@@ -53,8 +53,8 @@ export declare class Objects implements IObject {
     private queryClient;
     private spClient;
     createObject(msg: MsgCreateObject): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
@@ -78,8 +78,8 @@ export declare class Objects implements IObject {
     private getObjectOffsetFromSP;
     private getObjectStatusFromSp;
     cancelCreateObject(msg: MsgCancelCreateObject): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
@@ -90,8 +90,8 @@ export declare class Objects implements IObject {
         };
     }>;
     deleteObject(msg: MsgDeleteObject): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
@@ -102,8 +102,8 @@ export declare class Objects implements IObject {
         };
     }>;
     updateObjectInfo(msg: MsgUpdateObjectInfo): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
@@ -151,8 +151,8 @@ export declare class Objects implements IObject {
         body?: undefined;
     }>;
     createFolder(msg: Omit<MsgCreateObject, 'payloadSize' | 'contentType' | 'expectChecksums'>): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
@@ -174,8 +174,8 @@ export declare class Objects implements IObject {
         body?: undefined;
     }>;
     putObjectPolicy(bucketName: string, objectName: string, srcMsg: Omit<MsgPutPolicy, 'resource'>): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
@@ -188,8 +188,8 @@ export declare class Objects implements IObject {
     isObjectPermissionAllowed(bucketName: string, objectName: string, actionType: ActionType, operator: string): Promise<QueryVerifyPermissionResponse>;
     getObjectPolicy(bucketName: string, objectName: string, principalAddr: string): Promise<QueryPolicyForAccountResponse>;
     deleteObjectPolicy(operator: string, bucketName: string, objectName: string, principalAddr: string, principalType: keyof typeof PrincipalType): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/offchainauth.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/offchainauth.d.ts
index d8ebb8e..a37bc50 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/offchainauth.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/offchainauth.d.ts
@@ -1,5 +1,5 @@
-import { SpResponse } from '..';
-import { IGenOffChainAuthKeyPairAndUpload, IReturnOffChainAuthKeyPairAndUpload } from '../types/storage';
+import { SpResponse } from '@bnb-chain/greenfield-js-sdk/dist/esm';
+import { IGenOffChainAuthKeyPairAndUpload, IReturnOffChainAuthKeyPairAndUpload } from '@bnb-chain/greenfield-js-sdk/dist/esm/types/storage';
 export interface IOffChainAuth {
     /**
      * generate off-chain auth key pair and upload the public key to meta service, return the seedString for signing message when user need to get approval from sp.
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/payment.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/payment.d.ts
index 056771a..94b35c9 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/payment.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/payment.d.ts
@@ -1,10 +1,10 @@
 import { QueryAutoSettleRecordsRequest, QueryAutoSettleRecordsResponse, QueryDynamicBalanceRequest, QueryDynamicBalanceResponse, QueryGetStreamRecordResponse, QueryOutFlowsRequest, QueryOutFlowsResponse, QueryParamsByTimestampRequest, QueryParamsByTimestampResponse, QueryParamsResponse, QueryPaymentAccountCountRequest, QueryPaymentAccountCountResponse, QueryPaymentAccountCountsRequest, QueryPaymentAccountCountsResponse, QueryPaymentAccountRequest, QueryPaymentAccountResponse, QueryPaymentAccountsByOwnerRequest, QueryPaymentAccountsByOwnerResponse, QueryPaymentAccountsRequest, QueryPaymentAccountsResponse, QueryStreamRecordsRequest, QueryStreamRecordsResponse } from '@bnb-chain/greenfield-cosmos-types/greenfield/payment/query';
 import { MsgDeposit, MsgDisableRefund, MsgWithdraw } from '@bnb-chain/greenfield-cosmos-types/greenfield/payment/tx';
-import { AuthType, SpResponse, TxResponse } from '..';
-import { TxClient } from '../clients/txClient';
-import { ListUserPaymentAccountsResponse, ListUserPaymentAccountsResquest } from '../types/sp/ListUserPaymentAccounts';
-import { SpConfig } from './config';
-import { Sp } from './sp';
+import { AuthType, SpResponse, TxResponse } from '@bnb-chain/greenfield-js-sdk/dist/esm';
+import { TxClient } from '@bnb-chain/greenfield-js-sdk/dist/esm/clients/txClient';
+import { ListUserPaymentAccountsResponse, ListUserPaymentAccountsResquest } from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListUserPaymentAccounts';
+import { SpConfig } from '@bnb-chain/greenfield-js-sdk/dist/esm/api/config';
+import { Sp } from '@bnb-chain/greenfield-js-sdk/dist/esm/api/sp';
 export interface IPayment {
     /**
      * retrieves stream record information for a given stream address.
@@ -59,8 +59,8 @@ export declare class Payment implements IPayment {
     getAutoSettleRecords(request: QueryAutoSettleRecordsRequest): Promise<QueryAutoSettleRecordsResponse>;
     getOutFlows(request: QueryOutFlowsRequest): Promise<QueryOutFlowsResponse>;
     deposit(msg: MsgDeposit): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
@@ -71,8 +71,8 @@ export declare class Payment implements IPayment {
         };
     }>;
     withdraw(msg: MsgWithdraw): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
@@ -83,8 +83,8 @@ export declare class Payment implements IPayment {
         };
     }>;
     disableRefund(msg: MsgDisableRefund): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/proposal.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/proposal.d.ts
index 8b75226..0370109 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/proposal.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/proposal.d.ts
@@ -1,7 +1,7 @@
 import { MsgSubmitProposal, MsgVote } from '@bnb-chain/greenfield-cosmos-types/cosmos/gov/v1/tx';
 import { MsgCreateValidator } from '@bnb-chain/greenfield-cosmos-types/cosmos/staking/v1beta1/tx';
-import { TxResponse } from '..';
-import { TxClient } from '../clients/txClient';
+import { TxResponse } from '@bnb-chain/greenfield-js-sdk/dist/esm';
+import { TxClient } from '@bnb-chain/greenfield-js-sdk/dist/esm/clients/txClient';
 export interface IProposal {
     /**
      * NOTICE: only validator can use this api
@@ -16,8 +16,8 @@ export declare class Proposal implements IProposal {
     private txClient;
     constructor(txClient: TxClient);
     voteProposal(msg: MsgVote): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
@@ -28,8 +28,8 @@ export declare class Proposal implements IProposal {
         };
     }>;
     submitProposal(createMsg: MsgCreateValidator, submitMsg: MsgSubmitProposal): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/sp.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/sp.d.ts
index 707d778..5c61b9f 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/sp.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/sp.d.ts
@@ -1,7 +1,7 @@
-import { ListUserOwnedGroupsResponse } from '../types/sp/ListUserOwnedGroups';
+import { ListUserOwnedGroupsResponse } from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListUserOwnedGroups';
 import { QueryGlobalSpStorePriceByTimeRequest, QueryGlobalSpStorePriceByTimeResponse, QueryParamsResponse, QuerySpStoragePriceRequest, QuerySpStoragePriceResponse, QueryStorageProviderByOperatorAddressRequest, QueryStorageProviderByOperatorAddressResponse, QueryStorageProviderMaintenanceRecordsRequest, QueryStorageProviderMaintenanceRecordsResponse } from '@bnb-chain/greenfield-cosmos-types/greenfield/sp/query';
 import { StorageProvider } from '@bnb-chain/greenfield-cosmos-types/greenfield/sp/types';
-import type { ListGroupsMembersRequest, ListGroupsMembersResponse, ListGroupsResponse, ListGroupsResquest, ListUserGroupsResponse, ListUserGroupsResquest, ListUserOwnedGroupsRequest, SpResponse, VerifyPermissionRequest, VerifyPermissionResponse } from '..';
+import type { ListGroupsMembersRequest, ListGroupsMembersResponse, ListGroupsResponse, ListGroupsResquest, ListUserGroupsResponse, ListUserGroupsResquest, ListUserOwnedGroupsRequest, SpResponse, VerifyPermissionRequest, VerifyPermissionResponse } from '@bnb-chain/greenfield-js-sdk/dist/esm';
 export interface ISp {
     /**
      * return the storage provider info on chain
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/storage.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/storage.d.ts
index 77733b0..77790a3 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/storage.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/storage.d.ts
@@ -1,7 +1,7 @@
-import { TxClient } from '../clients/txClient';
+import { TxClient } from '@bnb-chain/greenfield-js-sdk/dist/esm/clients/txClient';
 import { QueryGroupMembersExistRequest, QueryGroupMembersExistResponse, QueryGroupsExistByIdRequest, QueryGroupsExistRequest, QueryGroupsExistResponse, QueryLockFeeRequest, QueryLockFeeResponse, QueryParamsResponse, QueryPolicyByIdRequest, QueryPolicyByIdResponse, QueryPolicyForAccountRequest, QueryPolicyForAccountResponse, QueryPolicyForGroupRequest, QueryPolicyForGroupResponse } from '@bnb-chain/greenfield-cosmos-types/greenfield/storage/query';
 import { MsgDeletePolicy, MsgPutPolicy, MsgSetTag } from '@bnb-chain/greenfield-cosmos-types/greenfield/storage/tx';
-import { TxResponse } from '..';
+import { TxResponse } from '@bnb-chain/greenfield-js-sdk/dist/esm';
 export interface IStorage {
     params(): Promise<QueryParamsResponse>;
     putPolicy(msg: MsgPutPolicy): Promise<TxResponse>;
@@ -22,8 +22,8 @@ export declare class Storage implements IStorage {
     private queryClient;
     params(): Promise<QueryParamsResponse>;
     putPolicy(msg: MsgPutPolicy): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
@@ -34,8 +34,8 @@ export declare class Storage implements IStorage {
         };
     }>;
     deletePolicy(msg: MsgDeletePolicy): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
@@ -46,8 +46,8 @@ export declare class Storage implements IStorage {
         };
     }>;
     setTag(msg: MsgSetTag): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/validator.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/validator.d.ts
index 98e31eb..0764861 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/validator.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/validator.d.ts
@@ -1,7 +1,7 @@
 import { QueryValidatorsRequest, QueryValidatorsResponse } from '@bnb-chain/greenfield-cosmos-types/cosmos/staking/v1beta1/query';
 import { MsgCreateValidator, MsgEditValidator } from '@bnb-chain/greenfield-cosmos-types/cosmos/staking/v1beta1/tx';
-import { TxResponse } from '..';
-import { TxClient } from '../clients/txClient';
+import { TxResponse } from '@bnb-chain/greenfield-js-sdk/dist/esm';
+import { TxClient } from '@bnb-chain/greenfield-js-sdk/dist/esm/clients/txClient';
 export interface IValidator {
     /**
      * lists all validators (if status is empty string) or validators filtered by status.
@@ -27,8 +27,8 @@ export declare class Validator implements IValidator {
     private proposal;
     listValidators(request: QueryValidatorsRequest): Promise<QueryValidatorsResponse>;
     createValidator(address: string, msg: MsgCreateValidator): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
@@ -39,8 +39,8 @@ export declare class Validator implements IValidator {
         };
     }>;
     editValidator(address: string, msg: MsgEditValidator): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/virtualGroup.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/virtualGroup.d.ts
index fa9246c..3b82204 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/virtualGroup.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/api/virtualGroup.d.ts
@@ -1,7 +1,7 @@
 import { QueryGlobalVirtualGroupByFamilyIDRequest, QueryGlobalVirtualGroupByFamilyIDResponse, QueryGlobalVirtualGroupFamiliesRequest, QueryGlobalVirtualGroupFamiliesResponse, QueryGlobalVirtualGroupFamilyRequest, QueryGlobalVirtualGroupFamilyResponse, QueryGlobalVirtualGroupRequest, QueryGlobalVirtualGroupResponse, QueryParamsResponse, QuerySPAvailableGlobalVirtualGroupFamiliesRequest, QuerySPAvailableGlobalVirtualGroupFamiliesResponse, QuerySpOptimalGlobalVirtualGroupFamilyRequest, QuerySpOptimalGlobalVirtualGroupFamilyResponse } from '@bnb-chain/greenfield-cosmos-types/greenfield/virtualgroup/query';
 import { MsgSettle } from '@bnb-chain/greenfield-cosmos-types/greenfield/virtualgroup/tx';
-import { TxResponse } from '..';
-import { TxClient } from '../clients/txClient';
+import { TxResponse } from '@bnb-chain/greenfield-js-sdk/dist/esm';
+import { TxClient } from '@bnb-chain/greenfield-js-sdk/dist/esm/clients/txClient';
 export interface IVirtualGroup {
     params(): Promise<QueryParamsResponse>;
     getGlobalVirtualGroup(request: QueryGlobalVirtualGroupRequest): Promise<QueryGlobalVirtualGroupResponse>;
@@ -24,8 +24,8 @@ export declare class VirtualGroup implements IVirtualGroup {
     getSpOptimalGlobalVirtualGroupFamily(request: QuerySpOptimalGlobalVirtualGroupFamilyRequest): Promise<QuerySpOptimalGlobalVirtualGroupFamilyResponse>;
     getSpAvailableGlobalVirtualGroupFamilies(request: QuerySPAvailableGlobalVirtualGroupFamiliesRequest): Promise<QuerySPAvailableGlobalVirtualGroupFamiliesResponse>;
     settle(address: string, msg: MsgSettle): Promise<{
-        simulate: (opts: import("..").SimulateOptions) => Promise<import("..").ISimulateGasFee>;
-        broadcast: (opts: import("..").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
+        simulate: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").SimulateOptions) => Promise<import("@bnb-chain/greenfield-js-sdk/dist/esm").ISimulateGasFee>;
+        broadcast: (opts: import("@bnb-chain/greenfield-js-sdk/dist/esm").BroadcastOptions) => Promise<import("@cosmjs/stargate").DeliverTxResponse>;
         metaTxInfo: {
             typeUrl: string;
             address: string;
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/client.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/client.d.ts
index 20e6d18..d48c7ef 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/client.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/client.d.ts
@@ -1,24 +1,24 @@
 import 'reflect-metadata';
-import { IAccount } from './api/account';
-import { IBasic } from './api/basic';
-import { IBucket } from './api/bucket';
-import { IChallenge } from './api/challenge';
-import { ICrossChain } from './api/crosschain';
-import { IDistribution } from './api/distribution';
-import { IFeeGrant } from './api/feegrant';
-import { IGashub } from './api/gashub';
-import { IGroup } from './api/group';
-import { IObject } from './api/objects';
-import { IOffChainAuth } from './api/offchainauth';
-import { IPayment } from './api/payment';
-import { IProposal } from './api/proposal';
-import { ISp } from './api/sp';
-import { IStorage } from './api/storage';
-import { Validator } from './api/validator';
-import { IVirtualGroup } from './api/virtualGroup';
-import { RpcQueryClient } from './clients/queryclient';
-import { ISpClient } from './clients/spclient/spClient';
-import { ITxClient } from './clients/txClient';
+import { IAccount } from '@bnb-chain/greenfield-js-sdk/dist/esm/api/account';
+import { IBasic } from '@bnb-chain/greenfield-js-sdk/dist/esm/api/basic';
+import { IBucket } from '@bnb-chain/greenfield-js-sdk/dist/esm/api/bucket';
+import { IChallenge } from '@bnb-chain/greenfield-js-sdk/dist/esm/api/challenge';
+import { ICrossChain } from '@bnb-chain/greenfield-js-sdk/dist/esm/api/crosschain';
+import { IDistribution } from '@bnb-chain/greenfield-js-sdk/dist/esm/api/distribution';
+import { IFeeGrant } from '@bnb-chain/greenfield-js-sdk/dist/esm/api/feegrant';
+import { IGashub } from '@bnb-chain/greenfield-js-sdk/dist/esm/api/gashub';
+import { IGroup } from '@bnb-chain/greenfield-js-sdk/dist/esm/api/group';
+import { IObject } from '@bnb-chain/greenfield-js-sdk/dist/esm/api/objects';
+import { IOffChainAuth } from '@bnb-chain/greenfield-js-sdk/dist/esm/api/offchainauth';
+import { IPayment } from '@bnb-chain/greenfield-js-sdk/dist/esm/api/payment';
+import { IProposal } from '@bnb-chain/greenfield-js-sdk/dist/esm/api/proposal';
+import { ISp } from '@bnb-chain/greenfield-js-sdk/dist/esm/api/sp';
+import { IStorage } from '@bnb-chain/greenfield-js-sdk/dist/esm/api/storage';
+import { Validator } from '@bnb-chain/greenfield-js-sdk/dist/esm/api/validator';
+import { IVirtualGroup } from '@bnb-chain/greenfield-js-sdk/dist/esm/api/virtualGroup';
+import { RpcQueryClient } from '@bnb-chain/greenfield-js-sdk/dist/esm/clients/queryclient';
+import { ISpClient } from '@bnb-chain/greenfield-js-sdk/dist/esm/clients/spclient/spClient';
+import { ITxClient } from '@bnb-chain/greenfield-js-sdk/dist/esm/clients/txClient';
 export declare class Client {
     account: IAccount;
     basic: IBasic;
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/clients/spclient/spApis/metaInfos.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/clients/spclient/spApis/metaInfos.d.ts
index 19d0c81..d7bad7d 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/clients/spclient/spApis/metaInfos.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/clients/spclient/spApis/metaInfos.d.ts
@@ -17,7 +17,7 @@ export declare const SpMetaInfo: {
         objectName: string;
         bucketName: string;
         contentType: string;
-        body: import("../../../types/sp/Common").UploadFile;
+        body: import("@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/Common").UploadFile;
         txnHash?: string | undefined;
         delegatedOpts?: {
             visibility: import("@/types").VisibilityType;
@@ -27,7 +27,7 @@ export declare const SpMetaInfo: {
         url: string;
         optionsWithOutHeaders: Omit<RequestInit, "headers">;
         reqMeta: Partial<ReqMeta>;
-        file: import("../../../types/sp/Common").UploadFile;
+        file: import("@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/Common").UploadFile;
     }>;
     getQueryBucketReadQuotaMetaInfo: (endpoint: string, params: import("@/types").ReadQuotaRequest) => Promise<{
         url: string;
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/clients/spclient/spClient.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/clients/spclient/spClient.d.ts
index 20956fc..1a29eba 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/clients/spclient/spClient.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/clients/spclient/spClient.d.ts
@@ -1,7 +1,7 @@
 import { OnProgress } from '@/types';
 import { AuthType, ReqMeta } from '@/types/auth';
-import { getGetObjectMetaInfo } from './spApis/getObject';
-import { getPutObjectMetaInfo } from './spApis/putObject';
+import { getGetObjectMetaInfo } from '@bnb-chain/greenfield-js-sdk/dist/esm/clients/spclient/spApis/getObject';
+import { getPutObjectMetaInfo } from '@bnb-chain/greenfield-js-sdk/dist/esm/clients/spclient/spApis/putObject';
 import { UploadFile } from '@/types/sp/Common';
 export interface ISpClient {
     callApi(url: string, options: RequestInit, duration: number, customError?: {
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/clients/txClient.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/clients/txClient.d.ts
index ee4afeb..4e59322 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/clients/txClient.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/clients/txClient.d.ts
@@ -1,6 +1,6 @@
 import { BaseAccount } from '@bnb-chain/greenfield-cosmos-types/cosmos/auth/v1beta1/auth';
 import { DeliverTxResponse } from '@cosmjs/stargate';
-import { BroadcastOptions, CustomTx, ISimulateGasFee, MetaTxInfo, SimulateOptions, TxResponse } from '..';
+import { BroadcastOptions, CustomTx, ISimulateGasFee, MetaTxInfo, SimulateOptions, TxResponse } from '@bnb-chain/greenfield-js-sdk/dist/esm';
 export interface ITxClient {
     /**
      * simulates a transaction containing the provided messages on the chain.
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/constants/index.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/constants/index.d.ts
index 41e2846..8baa21b 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/constants/index.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/constants/index.d.ts
@@ -1,5 +1,5 @@
-export * from './typeUrl';
-export * from './http';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/constants/typeUrl';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/constants/http';
 export declare const ZERO_PUBKEY = "0x000000000000000000000000000000000000000000000000000000000000000000";
 export declare const DEFAULT_DENOM = "BNB";
 export declare const DEFAULT_PART_SIZE: number;
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/index.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/index.d.ts
index 0272b31..eaaa799 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/index.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/index.d.ts
@@ -1,7 +1,7 @@
-export * from './client';
-export * from './clients/spclient/spApis/metaInfos';
-export * from './constants';
-export * from './messages';
-export * from './sign';
-export * from './types';
-export * from './utils';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/client';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/clients/spclient/spApis/metaInfos';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/constants';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/messages';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/sign';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/types';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/utils';
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/index.js b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/index.js
index eedb9be..2abb161 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/index.js
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/index.js
@@ -5619,6 +5619,7 @@ const generateUrlByBucketName = (endpoint = '', bucketName) => {
     verifyBucketName(bucketName);
     verifyUrl(endpoint);
     const { protocol } = new URL(endpoint);
+    return endpoint;
     return endpoint.replace(`${protocol}//`, `${protocol}//${bucketName}.`);
 };
 const isSQLInjection = (input) => {
@@ -5992,39 +5993,39 @@ const getGetObjectMetaInfo = async (endpoint, params) => {
 
 // https://github.com/bnb-chain/greenfield-storage-provider/blob/master/docs/storage-provider-rest-api/put_object.md
 const getPutObjectMetaInfo = async (endpoint, params) => {
-    const { bucketName, objectName, txnHash, contentType, body, delegatedOpts } = params;
-    const path = `/${encodePath(objectName)}`;
-    let queryMap = {};
-    if (delegatedOpts) {
-        queryMap = {
-            delegate: '',
-            payload_size: String(body.size),
-            visibility: delegatedOpts.visibility.toString(),
-            is_update: String(delegatedOpts.isUpdate || false),
-        };
-    }
-    let url = new URL(path, generateUrlByBucketName(endpoint, bucketName));
-    url = getSortQueryParams(url, queryMap);
-    const reqMeta = {
-        contentSHA256: EMPTY_STRING_SHA256,
-        txnHash: txnHash,
-        method: METHOD_PUT,
-        url: {
-            hostname: url.hostname,
-            query: url.searchParams.toString(),
-            path,
-        },
-        contentType,
-    };
-    const optionsWithOutHeaders = {
-        method: METHOD_PUT,
-    };
-    return {
-        url: url.href,
-        optionsWithOutHeaders,
-        reqMeta,
-        file: body,
-    };
+  const { bucketName, objectName, txnHash, contentType, body, delegatedOpts } = params;
+  const path = `/${encodePath(bucketName)}/${encodePath(objectName)}`;
+  let queryMap = {};
+  if (delegatedOpts) {
+      queryMap = {
+          delegate: '',
+          payload_size: String(body.size),
+          visibility: delegatedOpts.visibility.toString(),
+          is_update: String(delegatedOpts.isUpdate || false),
+      };
+  }
+  let url = new URL(path, generateUrlByBucketName(endpoint, bucketName));
+  url = getSortQueryParams(url, queryMap);
+  const reqMeta = {
+      contentSHA256: EMPTY_STRING_SHA256,
+      txnHash: txnHash,
+      method: METHOD_PUT,
+      url: {
+          hostname: url.hostname,
+          query: url.searchParams.toString(),
+          path,
+      },
+      contentType,
+  };
+  const optionsWithOutHeaders = {
+      method: METHOD_PUT,
+  };
+  return {
+      url: url.href,
+      optionsWithOutHeaders,
+      reqMeta,
+      file: body,
+  };
 };
 
 let SpClient = class SpClient {
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/messages/index.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/messages/index.d.ts
index 0ccaf15..79fc8b1 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/messages/index.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/messages/index.d.ts
@@ -1 +1 @@
-export { createEIP712, generateFee, generateMessage, generateMsg, generateTypes, mergeMultiEip712, mergeMultiMessage, typeWrapper, } from './utils';
+export { createEIP712, generateFee, generateMessage, generateMsg, generateTypes, mergeMultiEip712, mergeMultiMessage, typeWrapper, } from '@bnb-chain/greenfield-js-sdk/dist/esm/messages/utils';
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/messages/utils.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/messages/utils.d.ts
index d62a3e2..af2a75f 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/messages/utils.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/messages/utils.d.ts
@@ -1,5 +1,5 @@
 import { Any } from '@bnb-chain/greenfield-cosmos-types/google/protobuf/any';
-import { MetaTxInfo } from '..';
+import { MetaTxInfo } from '@bnb-chain/greenfield-js-sdk/dist/esm';
 export type EIP712Msg = Record<string, Array<{
     type: string;
     name: string;
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/sign/index.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/sign/index.d.ts
index e0605e6..ac087d0 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/sign/index.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/sign/index.d.ts
@@ -2,5 +2,5 @@ export interface ISignature712 {
     signature: string;
     messageHash: Uint8Array;
 }
-export { sign712Tx } from './signTx';
-export { eip712Hash, makeCosmsPubKey, recoverPk } from './pubKey';
+export { sign712Tx } from '@bnb-chain/greenfield-js-sdk/dist/esm/sign/signTx';
+export { eip712Hash, makeCosmsPubKey, recoverPk } from '@bnb-chain/greenfield-js-sdk/dist/esm/sign/pubKey';
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/sign/pubKey.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/sign/pubKey.d.ts
index a65800e..1032620 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/sign/pubKey.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/sign/pubKey.d.ts
@@ -1,5 +1,5 @@
 /// <reference types="node" />
-import { ISignature712 } from '.';
+import { ISignature712 } from '@bnb-chain/greenfield-js-sdk/dist/esm/sign';
 /**
  * recover public key from signature
  *
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/sign/signTx.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/sign/signTx.d.ts
index 1eb1977..27e42e9 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/sign/signTx.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/sign/signTx.d.ts
@@ -1,4 +1,4 @@
-import { ISignature712 } from '.';
+import { ISignature712 } from '@bnb-chain/greenfield-js-sdk/dist/esm/sign';
 /**
  * @addr wallet address
  * @message sign typed v4 data
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/index.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/index.d.ts
index c4a6e53..8cb1952 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/index.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/index.d.ts
@@ -1,5 +1,5 @@
-export * from './auth';
-export * from './common';
-export * from './storage';
-export * from './tx';
-export * from './sp';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/types/auth';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/types/common';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/types/storage';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/types/tx';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp';
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/Common.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/Common.d.ts
index 580ebfc..b2df256 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/Common.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/Common.d.ts
@@ -1,5 +1,5 @@
 /// <reference types="node" />
-import { VisibilityType } from '../common';
+import { VisibilityType } from '@bnb-chain/greenfield-js-sdk/dist/esm/types/common';
 export type BucketMeta = {
     /**
      * defines the information of the bucket.
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/DelegateCreateFolder.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/DelegateCreateFolder.d.ts
index c43ee05..e2a088c 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/DelegateCreateFolder.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/DelegateCreateFolder.d.ts
@@ -1,4 +1,4 @@
-import { DelegatedOpts } from './Common';
+import { DelegatedOpts } from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/Common';
 export type DelegatedCreateFolderRequest = {
     bucketName: string;
     objectName: string;
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/DelegatedPubObject.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/DelegatedPubObject.d.ts
index d85c7fc..70d09fe 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/DelegatedPubObject.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/DelegatedPubObject.d.ts
@@ -1,5 +1,5 @@
-import { OnProgress } from '../common';
-import { DelegatedOpts, ResumableOpts, UploadFile } from './Common';
+import { OnProgress } from '@bnb-chain/greenfield-js-sdk/dist/esm/types/common';
+import { DelegatedOpts, ResumableOpts, UploadFile } from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/Common';
 export type DelegatedPubObjectRequest = {
     bucketName: string;
     objectName: string;
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/GetBucketMeta.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/GetBucketMeta.d.ts
index 6a48ea6..3808d35 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/GetBucketMeta.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/GetBucketMeta.d.ts
@@ -1,4 +1,4 @@
-import { BucketMetaWithVGF, StreamRecord } from './Common';
+import { BucketMetaWithVGF, StreamRecord } from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/Common';
 export interface GetBucketMetaRequest {
     bucketName: string;
     endpoint?: string;
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/GetObjectMeta.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/GetObjectMeta.d.ts
index c10c862..017be7a 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/GetObjectMeta.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/GetObjectMeta.d.ts
@@ -1,4 +1,4 @@
-import { ObjectMeta } from './Common';
+import { ObjectMeta } from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/Common';
 export interface GetObjectMetaRequest {
     bucketName: string;
     objectName: string;
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/GetUserBuckets.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/GetUserBuckets.d.ts
index a2fad6d..7eb6cd4 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/GetUserBuckets.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/GetUserBuckets.d.ts
@@ -1,4 +1,4 @@
-import { BucketMetaWithVGF } from './Common';
+import { BucketMetaWithVGF } from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/Common';
 export type GetUserBucketsRequest = {
     address: string;
     duration?: number;
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListBucketReadRecord.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListBucketReadRecord.d.ts
index 72eb093..7017939 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListBucketReadRecord.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListBucketReadRecord.d.ts
@@ -1,4 +1,4 @@
-import { ReadRecord } from './Common';
+import { ReadRecord } from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/Common';
 export type ListBucketReadRecordRequest = {
     bucketName: string;
     endpoint?: string;
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListBucketsByIDs.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListBucketsByIDs.d.ts
index df0661d..bc02e2f 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListBucketsByIDs.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListBucketsByIDs.d.ts
@@ -1,4 +1,4 @@
-import { BucketInfo } from './Common';
+import { BucketInfo } from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/Common';
 export type ListBucketsByIDsRequest = {
     ids: string[];
 };
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListBucketsByPaymentAccount.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListBucketsByPaymentAccount.d.ts
index 7c9d09e..032bcd9 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListBucketsByPaymentAccount.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListBucketsByPaymentAccount.d.ts
@@ -1,4 +1,4 @@
-import { BucketMeta } from './Common';
+import { BucketMeta } from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/Common';
 export type ListBucketsByPaymentAccountRequest = {
     paymentAccount: string;
     endpoint?: string;
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListGroups.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListGroups.d.ts
index 925f06b..fd18ec6 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListGroups.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListGroups.d.ts
@@ -1,5 +1,5 @@
 import { SourceType } from '@bnb-chain/greenfield-cosmos-types/greenfield/storage/common';
-import { GroupInfo } from './Common';
+import { GroupInfo } from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/Common';
 export type ListGroupsResquest = {
     name: string;
     prefix: string;
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListGroupsMembers.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListGroupsMembers.d.ts
index 005f065..d354442 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListGroupsMembers.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListGroupsMembers.d.ts
@@ -1,4 +1,4 @@
-import { GroupInfo } from './Common';
+import { GroupInfo } from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/Common';
 export type ListGroupsMembersRequest = {
     groupId: number;
     limit?: number;
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListObjectPolicies.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListObjectPolicies.d.ts
index db30708..89e5ffc 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListObjectPolicies.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListObjectPolicies.d.ts
@@ -1,5 +1,5 @@
 import { ActionType } from '@bnb-chain/greenfield-cosmos-types/greenfield/permission/common';
-import { PolicyMeta } from './Common';
+import { PolicyMeta } from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/Common';
 export type GetListObjectPoliciesRequest = {
     endpoint?: string;
     bucketName: string;
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListObjectsByBucketName.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListObjectsByBucketName.d.ts
index 55cb3d5..54ee6c5 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListObjectsByBucketName.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListObjectsByBucketName.d.ts
@@ -1,4 +1,4 @@
-import { ObjectMeta } from './Common';
+import { ObjectMeta } from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/Common';
 export type ListObjectsByBucketNameRequest = {
     bucketName: string;
     duration?: number;
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListObjectsByIDs.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListObjectsByIDs.d.ts
index 07a1093..e1c53e2 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListObjectsByIDs.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListObjectsByIDs.d.ts
@@ -1,4 +1,4 @@
-import { ObjectInfo } from './Common';
+import { ObjectInfo } from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/Common';
 export type ListObjectsByIDsRequest = {
     ids: string[];
 };
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListUserGroups.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListUserGroups.d.ts
index 05b3146..50b9f69 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListUserGroups.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListUserGroups.d.ts
@@ -1,4 +1,4 @@
-import { GroupInfo } from './Common';
+import { GroupInfo } from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/Common';
 export type ListUserGroupsResquest = {
     address: string;
     limit?: number;
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListUserOwnedGroups.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListUserOwnedGroups.d.ts
index 4947b30..492d304 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListUserOwnedGroups.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListUserOwnedGroups.d.ts
@@ -1,4 +1,4 @@
-import { GroupInfo } from './Common';
+import { GroupInfo } from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/Common';
 export type ListUserOwnedGroupsRequest = {
     address: string;
     limit?: number;
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListUserPaymentAccounts.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListUserPaymentAccounts.d.ts
index 54ba306..73133ee 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListUserPaymentAccounts.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListUserPaymentAccounts.d.ts
@@ -1,4 +1,4 @@
-import { StreamRecord } from './Common';
+import { StreamRecord } from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/Common';
 export type ListUserPaymentAccountsResquest = {
     account: string;
 };
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/PutObject.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/PutObject.d.ts
index fe0b395..ca8af9e 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/PutObject.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/PutObject.d.ts
@@ -1,5 +1,5 @@
-import { OnProgress } from '../common';
-import { ResumableOpts, UploadFile } from './Common';
+import { OnProgress } from '@bnb-chain/greenfield-js-sdk/dist/esm/types/common';
+import { ResumableOpts, UploadFile } from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/Common';
 export type PutObjectRequest = {
     endpoint?: string;
     bucketName: string;
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/index.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/index.d.ts
index 7f2dd9e..cdd0747 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/index.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/index.d.ts
@@ -1,26 +1,26 @@
-export * from './DelegateCreateFolder';
-export * from './DelegatedPubObject';
-export * from './ErrorResponse';
-export * from './GetBucketMeta';
-export * from './GetObject';
-export * from './GetObjectMeta';
-export * from './GetPreviewObject';
-export * from './GetUserBuckets';
-export * from './ListBucketReadRecord';
-export * from './ListBucketsByIDs';
-export * from './ListBucketsByPaymentAccount';
-export * from './ListGroups';
-export * from './ListGroupsMembers';
-export * from './ListObjectPolicies';
-export * from './ListObjectsByBucketName';
-export * from './ListObjectsByIDs';
-export * from './ListUserGroups';
-export * from './ListUserOwnedGroups';
-export * from './MigrateBucket';
-export * from './PutObject';
-export * from './ReadQuota';
-export * from './RequestNonce';
-export * from './SuccessResponse';
-export * from './UploadOffset';
-export * from './UploadProgress';
-export * from './VerifyPermission';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/DelegateCreateFolder';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/DelegatedPubObject';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ErrorResponse';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/GetBucketMeta';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/GetObject';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/GetObjectMeta';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/GetPreviewObject';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/GetUserBuckets';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListBucketReadRecord';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListBucketsByIDs';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListBucketsByPaymentAccount';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListGroups';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListGroupsMembers';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListObjectPolicies';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListObjectsByBucketName';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListObjectsByIDs';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListUserGroups';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ListUserOwnedGroups';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/MigrateBucket';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/PutObject';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/ReadQuota';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/RequestNonce';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/SuccessResponse';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/UploadOffset';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/UploadProgress';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/types/sp/VerifyPermission';
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/utils/asserts/index.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/utils/asserts/index.d.ts
index a722819..d9f20e0 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/utils/asserts/index.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/utils/asserts/index.d.ts
@@ -1,2 +1,2 @@
-export * from './params';
-export * from './s3';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/utils/asserts/params';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/utils/asserts/s3';
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/utils/asserts/params.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/utils/asserts/params.d.ts
index 05f2d16..f20d016 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/utils/asserts/params.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/utils/asserts/params.d.ts
@@ -1,5 +1,5 @@
 import { NodeFile, UploadFile } from '@/types/sp/Common';
-import { AuthType } from '../..';
+import { AuthType } from '@bnb-chain/greenfield-js-sdk/dist/esm';
 export declare const assertStringRequire: (s: string, errMsg: string) => void;
 export declare const assertPrivateKey: (privateKey: string) => void;
 export declare const assertAuthType: (authType: AuthType) => void;
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/utils/encoding.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/utils/encoding.d.ts
index 5a6cf82..0828f1b 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/utils/encoding.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/utils/encoding.d.ts
@@ -1,4 +1,4 @@
-import { encodePath } from '../clients/spclient/auth';
+import { encodePath } from '@bnb-chain/greenfield-js-sdk/dist/esm/clients/spclient/auth';
 declare const encodeToHex: (str?: string) => string;
 declare const decodeFromHex: (hex?: string) => string;
 declare const encodeObjectToHexString: (jsonObject: object) => string;
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/utils/index.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/utils/index.d.ts
index 9abdfc6..9be788b 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/utils/index.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/utils/index.d.ts
@@ -1,7 +1,7 @@
-export * from './allowance';
-export * from './asserts';
-export * from './encoding';
-export * from './grn';
-export * from './helpers';
-export * from './time';
-export * from './units';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/utils/allowance';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/utils/asserts';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/utils/encoding';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/utils/grn';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/utils/helpers';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/utils/time';
+export * from '@bnb-chain/greenfield-js-sdk/dist/esm/utils/units';
diff --git a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/utils/units.d.ts b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/utils/units.d.ts
index 3434824..e4b01a7 100644
--- a/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/utils/units.d.ts
+++ b/node_modules/@bnb-chain/greenfield-js-sdk/dist/esm/utils/units.d.ts
@@ -1,3 +1,3 @@
 import { SimulateResponse } from '@bnb-chain/greenfield-cosmos-types/cosmos/tx/v1beta1/service';
-import { ISimulateGasFee } from '..';
+import { ISimulateGasFee } from '@bnb-chain/greenfield-js-sdk/dist/esm';
 export declare const getGasFeeBySimulate: (simulateTxInfo: SimulateResponse, denom?: string) => ISimulateGasFee;
